

var PodComms = require('PodComms');
var Voter = require('Voter');
var _ = require('underscore.js');
var fs = require('fs');

Array.splat = function (obj) {
	return _.isArray(obj) ? obj : [obj];
}

var lunchFile = 'lunch.json';
PodComms.Command.register('lunch', {
	description: 'Start the lunch voting',
	callback: function(user, msg, match){
		var places = getDataFromFile(lunchFile);
		if (places && places.length > 0) {
			testVote = new Voter('lunch', places, PodComms.User.getUsers(), function (winner, scores) {
				PodComms.Messaging.public("<b>Location: </b>" + winner.name + '<br/><div class="map">'+winner.name+'</div>')

				// save scores, merge data from scores and from file, in case not all results are returned from scores
				var places = getDataFromFile(lunchFile);

				while (scores.length) {
					var place = scores.pop();

					var placeUpdated = {
						name: place.name,
						mapLink: place.item.mapLink,
						score: place.score,
						vetoCount: (place.veto ? 1 : 0)
					}

					for (var i = 0; i < places.length; i++) {
						if (places[i].name == placeUpdated.name) {
							placeUpdated.score += (places[i].score || 0);
							placeUpdated.vetoCount += (places[i].vetoCount || 0);
							places[i] = placeUpdated;
							break;
						}
					}
				}

				putDataToFile (lunchFile, places);
				PodComms.Messaging.public('The lunch file has been updated');
			});
		} else {
			PodComms.Messaging.private("Couldn't find any lunch places in the lunch file, sorry....", user);
		}
	}
});

PodComms.Command.register('lunchadd', {
	description: 'Add a place to the lunch file, use street name for chains',
	example: '/lunchadd Nandos Russell Street',
	callback: function(user, msg, match){
		var places = getDataFromFile(lunchFile);

		if (match.length > 0) {

			var name = match[1];

			places.push({
				name: name,
				added: Date.now()
			});

			putDataToFile (lunchFile, places);
			PodComms.Messaging.public(name + ' has been added to the lunch list<br/><div class="map">'+ name +'</div>');
		}
	}
});

PodComms.Command.register('lunchdel', {
	description: 'Delete a place from the lunch file by name',
	example: '/lunchdel Yum Cha',
	callback: function(user, msg, match){
		var places = getDataFromFile(lunchFile);

		if (match.length > 0) {

			var name = match[1];

			for (var i = 0; i < places.length; i++) {
				if (name == places[i].name) {
					places.splice(i,1);
					putDataToFile (lunchFile, places);
					PodComms.Messaging.public(name + ' has been removed from the lunch. '+user.name+', you hater...');
					return false;
				}
			}

			PodComms.Messaging.private(name + ' not found', user);
			return false;
		}
		PodComms.Messaging.private('Just give me a name...', user);
	}
});

PodComms.Command.register('lunchlist', {
	callback: function(user, msg, match){
		var places = getDataFromFile(lunchFile);

		var choices = [];

		while (places.length) {
			var p = places.pop();
			choices.push( p.name + ' (' + (p.score || 0) + ')');
		}

		PodComms.Messaging.private('Here are the choices:<br /><ol><li>' + choices.join('</li><li>') + '</li></ol>', user);
	}
});